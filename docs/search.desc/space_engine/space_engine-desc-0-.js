searchState.loadedDescShard("space_engine", 0, "This library serves as a foundational engine built on top …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>CollectionLoadingExt</code> trait extends the Bevy <code>App</code> …\nComputed state representing that the building process is …\nEnum representing the states related to building processes.\nComputed state representing that the content has been …\nComputed state representing the loading process.\nEnum representing the various states of the asset loading …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration for a specific camera layer.\nBuilder struct for configuring the camera state.\nTrait for extending the App with camera manager …\nStyle settings for the camera.\nReturns a mutable reference to the app.\nSets the bloom settings for the camera style.\nBloom settings for the camera.\nInitializes the camera manager and returns a CameraBuilder …\nSets the zoom limits for the camera style.\nZoom limits for the camera.\nSets the clear color for the camera.\nConfigures a camera layer with the specified …\nSets the depth for the camera style.\nDepth of the camera layer.\nEnables HDR rendering for the camera style.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFlag to enable HDR rendering.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new CamLayerConfig with the specified marker …\nSets the render layer for the camera style.\nRender layer for the camera.\nSets the tonemapping method for the camera style.\nTonemapping method to be applied when the camera is …\nSwitch the current camera layer to a new layer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnum representing the various states of the application.\nComputed state representing that the game is currently in …\nComputed state representing that the game is currently …\nComputed state representing that the game is currently …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPostUpdate\nPostUpdate\nUpdate\nSystem sets defining the order of execution for the space …\nUpdate\nPostUpdate\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilder command for creating a celestial body (planet or …\nCommands for the space module\nBuilder command for creating a star\nBuilder command for creating a vessel\nSets the argument of periapsis for the body’s orbit and …\nSets the argument of periapsis for the vessel’s orbit …\nAdds a belt to the star with specified radius, width, and …\nSets the color of the star and returns the builder …\nSets the color of the celestial body and returns the …\nSets the color of the vessel and returns the builder …\ncreates a new space\nSets the eccentricity of the body’s orbit and returns …\nSets the eccentricity of the vessel’s orbit and returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the mass of the star and returns the builder instance.\nSets the mass of the celestial body and returns the …\nSets the mean anomaly at epoch for the body’s orbit and …\nSets the mean anomaly at epoch for the vessel’s orbit …\nCreates a new <code>Star</code> instance with a specified name and …\nCreates a new <code>BodyBuilder</code> instance with a specified name …\nCreates a new <code>Vessel</code> instance with a specified name and …\nSets the parent celestial body that this body will orbit …\nSets the celestial body that this vessel will orbit and …\nSets the radius of the star and returns the builder …\nSets the radius of the celestial body and returns the …\nSets whether the body orbits in a reversed direction and …\nSets whether the vessel orbits in a reversed direction and …\nSets the semi-major axis of the body’s orbit and returns …\nSets the semi-major axis of the vessel’s orbit and …\ndefines which celestial body the camera should follow\nProperties describing a celestial body such as sphere of …\nProperties describing a celestial body in a Keplerian orbit\nDouble precision position which is accurate through an …\nCurrent state vector of a celestial body determined by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculates true anomaly\nastronomical unit in km\n<em>Z</em> depth - 2D\ngravitational constant\n<em>Z</em> depth - 2D\nArchimedes’ constant (π)\nLayer that is reserved for space rendering\nused for scaling <strong>real space</strong> to <strong>world/camera space</strong>\nPlugin for the space simulation, including camera …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA resource that holds the current time scale for the …\nA resource that holds the current star system name and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")